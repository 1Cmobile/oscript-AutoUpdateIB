#Использовать ".."

Перем юТест;
Перем Обновлятор;

Процедура Инициализация()
	
	Обновлятор = Новый Обновлятор();

	Обновлятор.УстановитьРежимОтладки(РежимОтладки());
    Лог = Обновлятор.ПолучитьЛог();
	
КонецПроцедуры

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("ТестДолжен_ПроверитьУстановкуКаталогов");
	СписокТестов.Добавить("ТестДолжен_ПроверитьУстановкуПараметровАутентификации");
	СписокТестов.Добавить("ТестДолжен_ПроверитьУстановкуНастроекОбновления");
	СписокТестов.Добавить("ТестДолжен_ПроверитьУстановкуИнтерваловОжидания");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеПараметровОбновленияКонфигурации");
	
	Возврат СписокТестов ;
	
КонецФункции

Процедура ТестДолжен_ПроверитьУстановкуКаталогов() Экспорт

	Каталоги = Обновлятор.ПолучитьПараметры("Каталоги");

	юТест.ПроверитьРавенство(ТипЗнч(Каталоги), Тип("Структура"), "Возвращенное значение ""Каталоги"" не является структурой.");
	юТест.ПроверитьИстину(Каталоги.Свойство("КаталогФайловОбновления"), "Не найден ключ КаталогФайловОбновления.");
	юТест.ПроверитьИстину(Каталоги.Свойство("КаталогВременныхФайлов"), "Не найден ключ КаталогВременныхФайлов.");
	юТест.ПроверитьИстину(Каталоги.Свойство("КаталогРезервныхКопий"), "Не найден ключ КаталогРезервныхКопий.");

	ТестПройден = Ложь;
	Попытка
    	Обновлятор.УстановитьКаталог("Неверный ключ", "С:\");
	Исключение
        ТестПройден = Истина;
	КонецПопытки;
    юТест.ПроверитьИстину(ТестПройден, "Исключение при установке неверного ключа не возникло.");
		
	СистемнаяИнформация = Новый СистемнаяИнформация();
	КаталогTEMP = СистемнаяИнформация.ПолучитьПеременнуюСреды("TEMP");
	Обновлятор.УстановитьКаталог("КаталогФайловОбновления", КаталогTEMP);
    Обновлятор.УстановитьКаталог("КаталогВременныхФайлов", КаталогTEMP);
    Обновлятор.УстановитьКаталог("КаталогРезервныхКопий", КаталогTEMP);

	Каталоги = Обновлятор.ПолучитьПараметры("Каталоги");
	Для Каждого Каталог Из Каталоги Цикл
		юТест.ПроверитьРавенство(Каталог.Значение, КаталогTEMP, 
			СтрШаблон("Каталог по ключу %1 не установлен.", Каталог.Ключ));
	КонецЦикла; 

КонецПроцедуры

Процедура ТестДолжен_ПроверитьУстановкуПараметровАутентификации() Экспорт

	Аутентификация = Обновлятор.ПолучитьПараметры("Аутентификация");

	юТест.ПроверитьРавенство(ТипЗнч(Аутентификация), Тип("Структура"), "Возвращенное значение ""Аутентификация"" не является структурой.");
	юТест.ПроверитьИстину(Аутентификация.Свойство("Пользователь"), "Не найден ключ Пользователь.");
	юТест.ПроверитьИстину(Аутентификация.Свойство("Пароль"), "Не найден ключ Пароль.");

	Обновлятор.УстановитьПараметрыАутентификации("Пользователь", "Пароль");

	Аутентификация = Обновлятор.ПолучитьПараметры("Аутентификация");
	юТест.ПроверитьРавенство(Аутентификация.Пользователь, "Пользователь", "Параметр аутентификации по ключу Пользователь не установлен");
	юТест.ПроверитьРавенство(Аутентификация.Пароль, "Пароль", "Параметр аутентификации по ключу Пароль не установлен");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьУстановкуНастроекОбновления() Экспорт
	
	НастройкиОбновления = Обновлятор.ПолучитьПараметры("НастройкиОбновления");

	юТест.ПроверитьРавенство(ТипЗнч(НастройкиОбновления), Тип("Структура"), "Возвращенное значение ""НастройкиОбновления"" не является структурой.");
	юТест.ПроверитьИстину(НастройкиОбновления.Свойство("БлокироватьСоединенияИБ"), "Не найден ключ БлокироватьСоединенияИБ.");
	юТест.ПроверитьИстину(НастройкиОбновления.Свойство("СоздаватьРезервнуюКопию"), "Не найден ключ СоздаватьРезервнуюКопию.");
	юТест.ПроверитьИстину(НастройкиОбновления.Свойство("ВыполнитьОтложенныеОбработчики"), "Не найден ключ ВыполнитьОтложенныеОбработчики.");
	юТест.ПроверитьИстину(НастройкиОбновления.Свойство("ВыполнятьСжатиеТаблицИБ"), "Не найден ключ ВыполнятьСжатиеТаблицИБ.");
	юТест.ПроверитьИстину(НастройкиОбновления.Свойство("ВосстанавливатьИнформационнуюБазу"), "Не найден ключ ВосстанавливатьИнформационнуюБазу.");

	ТестПройден = Ложь;
	Попытка
    	Обновлятор.УстановитьНастройкуОбновления("Неверный ключ", Истина);
	Исключение
        ТестПройден = Истина;
	КонецПопытки;
    юТест.ПроверитьИстину(ТестПройден, "Исключение при установке неверного ключа не возникло.");
	
	ТестПройден = Ложь;
	Попытка
    	Обновлятор.УстановитьНастройкуОбновления("БлокироватьСоединенияИБ", "Неверное значение");
	Исключение
        ТестПройден = Истина;
	КонецПопытки;
    юТест.ПроверитьИстину(ТестПройден, "Исключение при установке неверного значения не возникло.");

	Обновлятор.УстановитьНастройкуОбновления("БлокироватьСоединенияИБ", Ложь);
	Обновлятор.УстановитьНастройкуОбновления("СоздаватьРезервнуюКопию", Ложь);
	Обновлятор.УстановитьНастройкуОбновления("ВыполнитьОтложенныеОбработчики", Ложь);
	Обновлятор.УстановитьНастройкуОбновления("ВыполнятьСжатиеТаблицИБ", Ложь);
	Обновлятор.УстановитьНастройкуОбновления("ВосстанавливатьИнформационнуюБазу", Ложь);

	НастройкиОбновления = Обновлятор.ПолучитьПараметры("НастройкиОбновления");
	Для Каждого НастройкаОбновления Из НастройкиОбновления Цикл
		юТест.ПроверитьРавенство(НастройкаОбновления.Значение, Ложь, 
			СтрШаблон("Настройка обновления по ключу %1 не установлена.", НастройкаОбновления.Ключ));
	КонецЦикла; 

КонецПроцедуры

Процедура ТестДолжен_ПроверитьУстановкуИнтерваловОжидания() Экспорт
	
	ИнтервалыОжидания = Обновлятор.ПолучитьПараметры("ИнтервалыОжидания");

	юТест.ПроверитьРавенство(ТипЗнч(ИнтервалыОжидания), Тип("Структура"), "Возвращенное значение ""ИнтервалыОжидания"" не является структурой.");
	юТест.ПроверитьИстину(ИнтервалыОжидания.Свойство("ЗавершениеРаботыПользователей"), "Не найден ключ ЗавершениеРаботыПользователей.");
	юТест.ПроверитьИстину(ИнтервалыОжидания.Свойство("ЗавершениеСеансовФайловойИБ"), "Не найден ключ ЗавершениеСеансовФайловойИБ.");
	юТест.ПроверитьИстину(ИнтервалыОжидания.Свойство("ЗавершениеСеансовСервернойИБ"), "Не найден ключ ЗавершениеСеансовСервернойИБ.");
	
	ТестПройден = Ложь;
	Попытка
    	Обновлятор.УстановитьИнтервалОжидания("Неверный ключ", 10);
	Исключение
        ТестПройден = Истина;
	КонецПопытки;
    юТест.ПроверитьИстину(ТестПройден, "Исключение при установке неверного ключа не возникло.");
	
	ТестПройден = Ложь;
	Попытка
    	Обновлятор.УстановитьИнтервалОжидания("ЗавершениеРаботыПользователей", "Неверное значение");
	Исключение
        ТестПройден = Истина;
	КонецПопытки;
    юТест.ПроверитьИстину(ТестПройден, "Исключение при установке неверного значения не возникло.");
	
	Обновлятор.УстановитьИнтервалОжидания("ЗавершениеРаботыПользователей", 0);
	Обновлятор.УстановитьИнтервалОжидания("ЗавершениеСеансовФайловойИБ", 0);
	Обновлятор.УстановитьИнтервалОжидания("ЗавершениеСеансовСервернойИБ", 0);

	ИнтервалыОжидания = Обновлятор.ПолучитьПараметры("ИнтервалыОжидания");
	Для Каждого ИнтервалОжидания Из ИнтервалыОжидания Цикл
		юТест.ПроверитьРавенство(ИнтервалОжидания.Значение, 0, 
			СтрШаблон("Интервал ожидания по ключу %1 не установлен.", ИнтервалОжидания.Ключ));
	КонецЦикла; 

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеПараметровОбновленияКонфигурации() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	КаталогTEMP = СистемнаяИнформация.ПолучитьПеременнуюСреды("TEMP");
	Обновлятор.УстановитьКаталог("КаталогВременныхФайлов",  ОбъединитьПути(КаталогTEMP, "AutoUpdateIB"));

	ПараметрыОбновленияКонфигурации = Обновлятор.ПолучитьПараметрыОбновленияКонфигурации();
    Если ПараметрыОбновленияКонфигурации <> Неопределено Тогда
	
		юТест.ПроверитьРавенство(ТипЗнч(ПараметрыОбновленияКонфигурации), Тип("Структура"), "Возвращенное значение ""ПараметрыОбновленияКонфигурации"" не является структурой.");
		юТест.ПроверитьИстину(ПараметрыОбновленияКонфигурации.Свойство("ТипКонфигурации"), "Не найден ключ ТипКонфигурации.");
		юТест.ПроверитьИстину(ПараметрыОбновленияКонфигурации.Свойство("ВерсияРелиза"), "Не найден ключ ВерсияРелиза.");
		юТест.ПроверитьИстину(ПараметрыОбновленияКонфигурации.Свойство("ВерсияПлатформы"), "Не найден ключ ВерсияПлатформы.");
		юТест.ПроверитьИстину(ПараметрыОбновленияКонфигурации.Свойство("МассивОбновлений"), "Не найден ключ МассивОбновлений.");
		
		МассивОбновлений = ПараметрыОбновленияКонфигурации.МассивОбновлений;
		юТест.ПроверитьРавенство(ТипЗнч(МассивОбновлений), Тип("Массив"), "Возвращенное значение ""ПараметрыОбновленияКонфигурации.МассивОбновлений"" не является массивом.");
		юТест.ПроверитьБольшеИлиРавно(МассивОбновлений.Количество(), 1, "Не сформирован массив со списком обновлений конфигурации");   
	
	КонецЕсли;
	
	ФайлСпискаШаблонов = ОбъединитьПути(КаталогTEMP, "AutoUpdateIB\v8cscdsc.xml"); 
	ФайлСпискаШаблоновОбъект = Новый Файл(ФайлСпискаШаблонов);
	юТест.ПроверитьЛожь(ФайлСпискаШаблоновОбъект.Существует(), "Временный файл v8cscdsc.xml не удален");

КонецПроцедуры

Функция РежимОтладки()
   
	Для каждого АргументКомСтроки из АргументыКоманднойСтроки Цикл
        Если НРег(АргументКомСтроки) = "--debug" Тогда
            Возврат Истина;
        КонецЕсли; 
    КонецЦикла;
	
    Возврат Ложь;

КонецФункции

Инициализация();